// Let Mega walk like a crab


// generated by mBlock5 for MegaPi
// codes make you happy

#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>
#include "src/MeSingleLineFollower.h"
#include "src/MeCollisionSensor.h"
#include "src/MeBarrierSensor.h"
#include "src/MeNewRGBLed.h"
#include "src/MotorArray.h"
#include <MeMegaPi.h>

enum MotorState
{
    FORWARD,
    BACKWARD,
    LEFT,
    RIGHT,
    STOPPED
};

MeBarrierSensor barrier_right(A7);
MeBarrierSensor barrier_mid(A8);
MeBarrierSensor barrier_left(A6);
MeSingleLineFollower line_left(A9);
MeSingleLineFollower line_right(A10);
MeCollisionSensor collide_left(A11);
MeCollisionSensor collide_right(A12);
MeNewRGBLed rgb_left(A13);
MeNewRGBLed rgb_right(A14);
MotorArray motorArray(20, 30, 2.5);

MotorState ms = STOPPED;
int prev_motor_action(0);
const int MOTOR_ACTION_FREQUENCY(2000);

const int16_t SPEED = 255;

void setup() {
  Serial.begin(9600);
  TCCR1A = _BV(WGM10);
  TCCR1B = _BV(CS11) | _BV(WGM12);
  TCCR2A = _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS21);
  rgb_left.setColor(55, 0, 0);
  rgb_left.show();
  rgb_right.setColor(55, 0, 0);
  rgb_right.show();
}

void loop() {
  int loop_time = millis();
  switch (ms)
  {
    case STOPPED:
        if (collide_left.isCollision() || collide_right.isCollision())
        {
            ms = LEFT;
            motorArray.crawl(SPEED, 0);
            rgb_left.setColor(55, 55, 0);
            rgb_right.setColor(55, 55, 0);
            rgb_left.show();
            rgb_right.show();
            prev_motor_action = loop_time;
        }
        break;
    case LEFT:
        if (loop_time - prev_motor_action >= MOTOR_ACTION_FREQUENCY)
        {
            ms = RIGHT;
            motorArray.crawl(-SPEED, 0);
            rgb_left.setColor(0, 55, 0);
            rgb_right.setColor(0, 55, 0);
            rgb_left.show();
            rgb_right.show();
            prev_motor_action = millis();
        }
        break;
    case RIGHT:
        if (loop_time - prev_motor_action >= MOTOR_ACTION_FREQUENCY)
        {
            ms = FORWARD;
            motorArray.crawl(SPEED);
            rgb_left.setColor(0, 55, 55);
            rgb_right.setColor(0, 55, 55);
            rgb_left.show();
            rgb_right.show();
            prev_motor_action = millis();
        }
        break;
    case FORWARD:
        if (loop_time - prev_motor_action >= MOTOR_ACTION_FREQUENCY)
        {
            ms = BACKWARD;
            motorArray.crawl(-SPEED);
            rgb_left.setColor(0, 0, 55);
            rgb_right.setColor(0, 0, 55);
            rgb_left.show();
            rgb_right.show();
            prev_motor_action = millis();
        }
        break;
    case BACKWARD:
        if (loop_time - prev_motor_action >= MOTOR_ACTION_FREQUENCY)
        {
            ms = STOPPED;
            motorArray.stop();
            rgb_left.setColor(55, 0, 0);
            rgb_right.setColor(55, 0, 0);
            rgb_left.show();
            rgb_right.show();
            prev_motor_action = millis();
        }
        break;
  }
  motorArray.run();
}
